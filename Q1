import React, { useState, useEffect } from "react";
import { DndProvider, useDrag, useDrop } from "react-dnd";
import { HTML5Backend } from "react-dnd-html5-backend";
import { Button, Input, Select, Checkbox, DatePicker } from "antd";
import { PlusOutlined, SaveOutlined } from "@ant-design/icons";
import update from "immutability-helper";

const fieldTypes = [
  { label: "Text", value: "text" },
  { label: "Number", value: "number" },
  { label: "Date", value: "date" },
  { label: "Checkbox", value: "checkbox" },
];

const Field = ({ field, index, moveField, updateField, removeField }) => {
  const [, ref] = useDrag({
    type: "FIELD",
    item: { index },
  });

  const [, drop] = useDrop({
    accept: "FIELD",
    hover: (draggedItem) => {
      if (draggedItem.index !== index) {
        moveField(draggedItem.index, index);
        draggedItem.index = index;
      }
    },
  });

  return (
    <div ref={(node) => ref(drop(node))} className="p-2 border mb-2 bg-white">
      <Select
        value={field.type}
        onChange={(value) => updateField(index, "type", value)}
        className="mr-2"
      >
        {fieldTypes.map((ft) => (
          <Select.Option key={ft.value} value={ft.value}>
            {ft.label}
          </Select.Option>
        ))}
      </Select>
      <Input
        placeholder="Field Label"
        value={field.label}
        onChange={(e) => updateField(index, "label", e.target.value)}
        className="mr-2"
      />
      <Button danger onClick={() => removeField(index)}>Delete</Button>
    </div>
  );
};

const DynamicFormBuilder = () => {
  const [fields, setFields] = useState([]);

  useEffect(() => {
    const savedForm = localStorage.getItem("dynamicForm");
    if (savedForm) {
      setFields(JSON.parse(savedForm));
    }
  }, []);

  const addField = () => {
    setFields([...fields, { type: "text", label: "" }]);
  };

  const updateField = (index, key, value) => {
    setFields(
      fields.map((field, i) => (i === index ? { ...field, [key]: value } : field))
    );
  };

  const moveField = (from, to) => {
    setFields(update(fields, { $splice: [[from, 1], [to, 0, fields[from]]] }));
  };

  const removeField = (index) => {
    setFields(fields.filter((_, i) => i !== index));
  };

  const saveForm = () => {
    localStorage.setItem("dynamicForm", JSON.stringify(fields));
    alert("Form saved successfully!");
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="p-4 bg-gray-100 min-h-screen">
        <h2 className="text-lg font-bold mb-4">Dynamic Form Builder</h2>
        <div className="bg-white p-4 border rounded">
          {fields.map((field, index) => (
            <Field
              key={index}
              field={field}
              index={index}
              moveField={moveField}
              updateField={updateField}
              removeField={removeField}
            />
          ))}
          <Button type="dashed" icon={<PlusOutlined />} onClick={addField}>
            Add Field
          </Button>
        </div>
        <Button type="primary" icon={<SaveOutlined />} onClick={saveForm} className="mt-4">
          Save Form
        </Button>
      </div>
    </DndProvider>
  );
};

export default DynamicFormBuilder;
