import React, { useState, useEffect } from "react";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import { Button, Input, Modal } from "antd";
import { PlusOutlined } from "@ant-design/icons";

const initialTasks = {
  todo: [],
  inProgress: [],
  done: [],
};

const TaskManagementApp = () => {
  const [tasks, setTasks] = useState(initialTasks);
  const [newTask, setNewTask] = useState({ title: "", description: "" });
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const savedTasks = localStorage.getItem("tasks");
    if (savedTasks) setTasks(JSON.parse(savedTasks));
  }, []);

  useEffect(() => {
    localStorage.setItem("tasks", JSON.stringify(tasks));
  }, [tasks]);

  const handleAddTask = () => {
    if (!newTask.title) return;
    setTasks({ ...tasks, todo: [...tasks.todo, newTask] });
    setNewTask({ title: "", description: "" });
    setIsModalOpen(false);
  };

  const handleDeleteTask = (category, index) => {
    setTasks({
      ...tasks,
      [category]: tasks[category].filter((_, i) => i !== index),
    });
  };

  const handleDragEnd = (result) => {
    if (!result.destination) return;

    const sourceCategory = result.source.droppableId;
    const destCategory = result.destination.droppableId;
    const task = tasks[sourceCategory][result.source.index];

    const updatedSourceTasks = [...tasks[sourceCategory]];
    updatedSourceTasks.splice(result.source.index, 1);

    const updatedDestTasks = [...tasks[destCategory]];
    updatedDestTasks.splice(result.destination.index, 0, task);

    setTasks({
      ...tasks,
      [sourceCategory]: updatedSourceTasks,
      [destCategory]: updatedDestTasks,
    });
  };

  return (
    <div className="p-4 bg-gray-100 min-h-screen">
      <h2 className="text-lg font-bold mb-4">Task Management</h2>
      <Button icon={<PlusOutlined />} onClick={() => setIsModalOpen(true)}>
        Add Task
      </Button>
      <Modal
        title="Add New Task"
        visible={isModalOpen}
        onCancel={() => setIsModalOpen(false)}
        onOk={handleAddTask}
      >
        <Input
          placeholder="Task Title"
          value={newTask.title}
          onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
          className="mb-2"
        />
        <Input.TextArea
          placeholder="Task Description"
          value={newTask.description}
          onChange={(e) =>
            setNewTask({ ...newTask, description: e.target.value })
          }
        />
      </Modal>
      <DragDropContext onDragEnd={handleDragEnd}>
        <div className="grid grid-cols-3 gap-4 mt-4">
          {Object.keys(tasks).map((category) => (
            <Droppable key={category} droppableId={category}>
              {(provided) => (
                <div
                  ref={provided.innerRef}
                  {...provided.droppableProps}
                  className="p-4 bg-white rounded border"
                >
                  <h3 className="font-bold mb-2 capitalize">{category}</h3>
                  {tasks[category].map((task, index) => (
                    <Draggable key={index} draggableId={`${category}-${index}`} index={index}>
                      {(provided) => (
                        <div
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                          className="p-2 border mb-2 bg-gray-200 rounded flex justify-between"
                        >
